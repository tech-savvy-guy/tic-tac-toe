{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tic-tac-toe",
  "type": "registry:block",
  "title": "Tic Tac Toe Game",
  "description": "A modern tic-tac-toe game built with v0.",
  "dependencies": [
    "@supabase/supabase-js",
    "next-themes",
    "lucide-react",
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "components/game-board.tsx",
      "content": "\"use client\"\n\nimport type { Board, Player } from \"@/types/game\"\n\ninterface GameBoardProps {\n  board: Board\n  winningLine: number[] | null\n  isGameActive: boolean\n  isAiThinking: boolean\n  currentPlayer: Player\n  canMakeMove: boolean\n  onCellClick: (index: number) => void\n}\n\nexport function GameBoard({\n  board,\n  winningLine,\n  isGameActive,\n  isAiThinking,\n  currentPlayer,\n  canMakeMove,\n  onCellClick,\n}: GameBoardProps) {\n  return (\n    <div className=\"relative\">\n      <div className=\"grid grid-cols-3 gap-1 bg-border p-1 rounded-md select-none\">\n        {board.map((cell, index) => (\n          <button\n            key={index}\n            className={`aspect-square bg-background flex items-center justify-center text-4xl font-extralight transition-all duration-200 hover:bg-muted disabled:cursor-not-allowed focus:outline-none relative group ${\n              winningLine?.includes(index) ? \"bg-muted\" : \"\"\n            }`}\n            onClick={() => onCellClick(index)}\n            disabled={!isGameActive || isAiThinking || !canMakeMove}\n          >\n            {cell && (\n              <span\n                className={`${\n                  cell === \"X\" ? \"text-foreground\" : \"text-muted-foreground\"\n                } transition-all duration-300 animate-in zoom-in-50`}\n              >\n                {cell}\n              </span>\n            )}\n            {!cell && !isGameActive === false && isGameActive && !isAiThinking && canMakeMove && (\n              <span className=\"absolute inset-0 flex items-center justify-center text-muted-foreground text-4xl font-extralight opacity-0 group-hover:opacity-100 transition-opacity duration-200\">\n                {currentPlayer}\n              </span>\n            )}\n          </button>\n        ))}\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/game-screen.tsx",
      "content": "\"use client\"\n\nimport { ArrowLeft, RotateCcw, Wifi, WifiOff } from \"lucide-react\"\nimport { GameBoard } from \"./game-board\"\nimport type { GameMode, GameState, OnlineState } from \"@/types/game\"\n\ninterface GameScreenProps {\n  gameMode: GameMode\n  gameState: GameState\n  onlineState: OnlineState\n  onBack: () => void\n  onReset: () => void\n  onCellClick: (index: number) => void\n}\n\nexport function GameScreen({ gameMode, gameState, onlineState, onBack, onReset, onCellClick }: GameScreenProps) {\n  const { board, currentPlayer, winner, isGameActive, winningLine, isAiThinking } = gameState\n  const { room, playerSymbol, connectionStatus, roomCode } = onlineState\n\n  const getOpponentName = () => {\n    if (!room) return \"\"\n    return room.player1_id === onlineState.playerId ? room.player2_name : room.player1_name\n  }\n\n  const getGameTitle = () => {\n    switch (gameMode) {\n      case \"single\":\n        return \"vs AI\"\n      case \"local\":\n        return \"LOCAL\"\n      case \"online\":\n        return `vs ${getOpponentName()}`\n      default:\n        return \"\"\n    }\n  }\n\n  const getGameStatus = () => {\n    if (winner === \"tie\") {\n      return \"DRAW\"\n    }\n    if (winner) {\n      switch (gameMode) {\n        case \"single\":\n          return winner === \"X\" ? \"YOU WIN\" : \"AI WINS\"\n        case \"online\":\n          return winner === playerSymbol ? \"YOU WIN\" : \"YOU LOSE\"\n        default:\n          return `${winner} WINS`\n      }\n    }\n\n    if (isAiThinking) {\n      return <span className=\"animate-pulse\">AI THINKING...</span>\n    }\n\n    switch (gameMode) {\n      case \"single\":\n        return currentPlayer === \"X\" ? \"YOUR TURN\" : \"AI TURN\"\n      case \"online\":\n        return currentPlayer === playerSymbol ? \"YOUR TURN\" : \"OPPONENT'S TURN\"\n      default:\n        return `${currentPlayer} TURN`\n    }\n  }\n\n  const canMakeMove = () => {\n    if (gameMode === \"online\") {\n      return currentPlayer === playerSymbol\n    }\n    return true\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center px-4 py-8 sm:p-8\">\n      <div className=\"w-full max-w-xs space-y-8 animate-in fade-in duration-500\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between select-none\">\n          <button onClick={onBack} className=\"p-2 hover:bg-muted/5 rounded-full transition-all duration-200 group\">\n            <ArrowLeft className=\"h-5 w-5 text-muted-foreground group-hover:text-foreground transition-colors\" />\n          </button>\n          <div className=\"text-center\">\n            <h2 className=\"text-sm font-light tracking-widest text-muted-foreground uppercase\">{getGameTitle()}</h2>\n            {gameMode === \"online\" && (\n              <div className=\"flex items-center justify-center space-x-1 mt-1\">\n                {connectionStatus === \"connected\" ? (\n                  <Wifi className=\"h-3 w-3 text-success\" />\n                ) : (\n                  <WifiOff className=\"h-3 w-3 text-error\" />\n                )}\n                <span className=\"text-xs text-muted-foreground/40\">\n                  {playerSymbol} â€¢ {roomCode}\n                </span>\n              </div>\n            )}\n          </div>\n          <button onClick={onReset} className=\"p-2 hover:bg-muted/5 rounded-full transition-all duration-200 group\">\n            <RotateCcw className=\"h-5 w-5 text-muted-foreground group-hover:text-foreground transition-colors\" />\n          </button>\n        </div>\n\n        {/* Game Status */}\n        <div className=\"text-center h-8 flex items-center justify-center select-none\">\n          <div className=\"text-muted-foreground/40 font-light tracking-wide\">{getGameStatus()}</div>\n        </div>\n\n        {/* Game Board */}\n        <GameBoard\n          board={board}\n          winningLine={winningLine}\n          isGameActive={isGameActive}\n          isAiThinking={isAiThinking}\n          currentPlayer={currentPlayer}\n          canMakeMove={canMakeMove()}\n          onCellClick={onCellClick}\n        />\n\n        {/* Action Buttons */}\n        {winner && (\n          <div className=\"space-y-3 animate-in slide-in-from-bottom-4 duration-500\">\n            <button\n              onClick={onReset}\n              className=\"w-full py-3 bg-foreground text-background font-light tracking-wide hover:bg-foreground/80 transition-all duration-200\"\n            >\n              PLAY AGAIN\n            </button>\n            <button\n              onClick={onBack}\n              className=\"w-full py-3 text-foreground font-light tracking-wide hover:bg-muted/5 transition-all duration-200 border border-foreground\"\n            >\n              MENU\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/menu-screen.tsx",
      "content": "\"use client\"\n\nimport type { GameMode } from \"@/types/game\"\n\ninterface MenuScreenProps {\n  onModeSelect: (mode: GameMode) => void\n}\n\nexport function MenuScreen({ onModeSelect }: MenuScreenProps) {\n  return (\n    <div className=\"min-h-[90vh] bg-background flex items-center justify-center px-4 py-8 sm:p-8 select-none\">\n      <div className=\"w-full max-w-xs space-y-12 animate-in fade-in duration-500\">\n        <div className=\"text-center space-y-3 sm:space-y-4\">\n          <h1 className=\"text-4xl sm:text-5xl font-extralight tracking-wider text-foreground\">TIC</h1>\n          <div className=\"w-12 sm:w-16 h-px bg-foreground mx-auto\"></div>\n          <h1 className=\"text-4xl sm:text-5xl font-extralight tracking-wider text-foreground\">TAC</h1>\n          <div className=\"w-12 sm:w-16 h-px bg-foreground mx-auto\"></div>\n          <h1 className=\"text-4xl sm:text-5xl font-extralight tracking-wider text-foreground\">TOE</h1>\n        </div>\n\n        <div className=\"space-y-3 sm:space-y-4\">\n          <button\n            onClick={() => onModeSelect(\"single\")}\n            className=\"w-full py-3 sm:py-4 text-sm sm:text-base text-foreground font-light tracking-wide hover:bg-foreground hover:text-background transition-all duration-300 border border-muted-foreground hover:border-foreground group\"\n          >\n            <span className=\"group-hover:tracking-wider transition-all duration-300\">SINGLE PLAYER</span>\n          </button>\n          <button\n            onClick={() => onModeSelect(\"local\")}\n            className=\"w-full py-3 sm:py-4 text-sm sm:text-base text-foreground font-light tracking-wide hover:bg-foreground hover:text-background transition-all duration-300 border border-muted-foreground hover:border-foreground group\"\n          >\n            <span className=\"group-hover:tracking-wider transition-all duration-300\">LOCAL MULTIPLAYER</span>\n          </button>\n          <button\n            onClick={() => onModeSelect(\"online\")}\n            className=\"w-full py-3 sm:py-4 text-sm sm:text-base text-foreground font-light tracking-wide hover:bg-foreground hover:text-background transition-all duration-300 border border-muted-foreground hover:border-foreground group\"\n          >\n            <span className=\"group-hover:tracking-wider transition-all duration-300\">ONLINE MULTIPLAYER</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/online-setup-screen.tsx",
      "content": "\"use client\"\nimport { ArrowLeft } from \"lucide-react\"\nimport type { OnlineMode, ConnectionStatus } from \"@/types/game\"\n\ninterface OnlineSetupScreenProps {\n  onlineMode: OnlineMode\n  setOnlineMode: (mode: OnlineMode) => void\n  playerName: string\n  setPlayerName: (name: string) => void\n  joinCode: string\n  setJoinCode: (code: string) => void\n  connectionStatus: ConnectionStatus\n  onCreateRoom: () => void\n  onJoinRoom: () => void\n  onBack: () => void\n}\n\nexport function OnlineSetupScreen({\n  onlineMode,\n  setOnlineMode,\n  playerName,\n  setPlayerName,\n  joinCode,\n  setJoinCode,\n  connectionStatus,\n  onCreateRoom,\n  onJoinRoom,\n  onBack,\n}: OnlineSetupScreenProps) {\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center px-4 py-8 sm:p-8\">\n      <div className=\"w-full max-w-xs space-y-8 animate-in fade-in duration-500\">\n        <div className=\"flex items-center justify-between\">\n          <button onClick={onBack} className=\"p-2 hover:bg-muted/5 rounded-full transition-all duration-200 group\">\n            <ArrowLeft className=\"h-5 w-5 text-muted-foreground group-hover:text-foreground transition-colors\" />\n          </button>\n          <h2 className=\"text-sm font-light tracking-widest text-muted-foreground uppercase\">ONLINE</h2>\n          <div className=\"w-9\"></div>\n        </div>\n\n        <div className=\"space-y-6\">\n          {/* Mode Toggle - Ultra Minimal */}\n          <div className=\"flex\">\n            <button\n              onClick={() => setOnlineMode(\"create\")}\n              className={`flex-1 py-2 text-sm font-light tracking-wider transition-all duration-200 relative ${\n                onlineMode === \"create\"\n                  ? \"text-foreground\"\n                  : \"text-muted-foreground/30 hover:text-muted-foreground/50\"\n              }`}\n            >\n              CREATE\n              {onlineMode === \"create\" && (\n                <div className=\"absolute -bottom-1 left-1/2 w-4 h-[2px] bg-muted-foreground/40 transform -translate-x-1/2 transition-all duration-200\" />\n              )}\n            </button>\n            <button\n              onClick={() => setOnlineMode(\"join\")}\n              className={`flex-1 py-2 text-sm font-light tracking-wider transition-all duration-200 relative ${\n                onlineMode === \"join\"\n                  ? \"text-foreground\"\n                  : \"text-muted-foreground/30 hover:text-muted-foreground/50\"\n              }`}\n            >\n              JOIN\n              {onlineMode === \"join\" && (\n                <div className=\"absolute -bottom-1 left-1/2 w-4 h-[2px] bg-muted-foreground/40 transform -translate-x-1/2 transition-all duration-200\" />\n              )}\n            </button>\n          </div>\n\n          <div className=\"space-y-4\">\n            <input\n              type=\"text\"\n              placeholder=\"YOUR NAME\"\n              value={playerName}\n              onChange={(e) => setPlayerName(e.target.value)}\n              className=\"w-full py-3 px-0 bg-transparent border border-border focus:border-foreground outline-none font-light tracking-wide placeholder:text-muted-foreground/40 text-center\"\n              maxLength={20}\n            />\n\n            {onlineMode === \"join\" && (\n              <input\n                type=\"text\"\n                placeholder=\"ROOM CODE\"\n                value={joinCode}\n                onChange={(e) => setJoinCode(e.target.value.toUpperCase())}\n                className=\"w-full py-3 px-0 bg-transparent border border-border focus:border-foreground outline-none font-light tracking-widest placeholder:text-muted-foreground/40 text-center\"\n                maxLength={6}\n              />\n            )}\n          </div>\n\n          <button\n            onClick={onlineMode === \"create\" ? onCreateRoom : onJoinRoom}\n            disabled={\n              !playerName.trim() || (onlineMode === \"join\" && !joinCode.trim()) || connectionStatus === \"connecting\"\n            }\n            className=\"w-full py-4 bg-foreground text-background font-light tracking-wide hover:bg-foreground/80 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            {connectionStatus === \"connecting\"\n              ? onlineMode === \"create\"\n                ? \"CREATING...\"\n                : \"JOINING...\"\n              : onlineMode === \"create\"\n                ? \"CREATE ROOM\"\n                : \"JOIN ROOM\"}\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/waiting-room-screen.tsx",
      "content": "\"use client\"\n\nimport { ArrowLeft, Copy, Users, Wifi, WifiOff } from \"lucide-react\"\nimport type { ConnectionStatus } from \"@/types/game\"\n\ninterface WaitingRoomScreenProps {\n  roomCode: string\n  connectionStatus: ConnectionStatus\n  onBack: () => void\n  onCopyRoomCode: () => void\n}\n\nexport function WaitingRoomScreen({ roomCode, connectionStatus, onBack, onCopyRoomCode }: WaitingRoomScreenProps) {\n  console.log(\"WaitingRoomScreen rendered with:\", { roomCode, connectionStatus }) // Debug log\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-8 select-none\">\n      <div className=\"w-full max-w-xs space-y-8 animate-in fade-in duration-500\">\n        <div className=\"flex items-center justify-between\">\n          <button onClick={onBack} className=\"p-2 hover:bg-muted rounded-full transition-all duration-200 group\">\n            <ArrowLeft className=\"h-5 w-5 text-muted-foreground group-hover:text-foreground transition-colors\" />\n          </button>\n          <h2 className=\"text-sm font-light tracking-widest text-muted-foreground uppercase\">WAITING</h2>\n          <div className=\"flex items-center space-x-1\">\n            {connectionStatus === \"connected\" ? (\n              <Wifi className=\"h-4 w-4 text-success\" />\n            ) : (\n              <WifiOff className=\"h-4 w-4 text-error\" />\n            )}\n          </div>\n        </div>\n\n        <div className=\"text-center space-y-6\">\n          <div className=\"space-y-2\">\n            <p className=\"text-muted-foreground font-light tracking-wide\">ROOM CODE</p>\n            <div className=\"flex items-center justify-center space-x-2\">\n              <span className=\"text-3xl font-light tracking-widest text-foreground\">{roomCode}</span>\n              <button\n                onClick={onCopyRoomCode}\n                className=\"p-2 hover:bg-muted/5 rounded-full transition-all duration-200 group\"\n                title=\"Copy room code\"\n              >\n                <Copy className=\"h-4 w-4 text-muted-foreground group-active:text-success transition-colors\" />\n              </button>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Users className=\"h-5 w-5 text-muted-foreground/40\" />\n              <span className=\"text-muted-foreground font-light\">Waiting for opponent...</span>\n            </div>\n            <div className=\"flex justify-center\">\n              <div className=\"animate-pulse flex space-x-1\">\n                <div className=\"w-2 h-2 bg-muted-foreground/20 rounded-full animate-bounce\"></div>\n                <div\n                  className=\"w-2 h-2 bg-muted-foreground/20 rounded-full animate-bounce\"\n                  style={{ animationDelay: \"0.1s\" }}\n                ></div>\n                <div\n                  className=\"w-2 h-2 bg-muted-foreground/20 rounded-full animate-bounce\"\n                  style={{ animationDelay: \"0.2s\" }}\n                ></div>\n              </div>\n            </div>\n            {/* Debug info - remove this later */}\n            <div className=\"text-xs text-muted-foreground/60\">Status: {connectionStatus}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/theme-provider.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { ThemeProvider as NextThemesProvider } from \"next-themes\"\n\nexport function ThemeProvider({\n  children,\n  ...props\n}: React.ComponentProps<typeof NextThemesProvider>) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}",
      "type": "registry:component"
    },
    {
      "path": "components/theme-toggle.tsx",
      "content": "\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Moon, Sun } from \"lucide-react\"\n\nexport function ThemeToggle() {\n    const { theme, setTheme } = useTheme()\n\n    return (\n        <button\n            onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n            className=\"relative inline-flex hover:text-foreground transition-colors duration-200\"\n            aria-label=\"Toggle theme\"\n        >\n            <Moon className=\"h-3 w-3 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n            <Sun className=\"absolute h-3 w-3 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n        </button>\n    )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "components/footer.tsx",
      "content": "\"use client\"\n\nimport { ThemeToggle } from \"./theme-toggle\"\n\nexport function Footer() {\n    return (\n        <footer className=\"bottom-0 left-0 w-full py-3 px-4 sm:px-6 pb-6 font-mono select-none\">\n            <div className=\"max-w-screen-xl mx-auto flex flex-row flex-wrap items-center justify-center gap-2 sm:gap-3 text-xs text-muted-foreground\">\n                <span>~/</span>\n                <a\n                    href=\"https://sohamdatta.com\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"hover:text-foreground transition-colors duration-200\"\n                >\n                    Soham Datta\n                </a>\n                <span>â€¢</span>\n                <a\n                    href=\"https://v0.dev\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"hover:text-foreground/75 transition-colors duration-200\"\n                >\n                    <svg width=\"20\" viewBox=\"0 0 40 20\" fill=\"currentColor\">\n                        <path d=\"M23.3919 0H32.9188C36.7819 0 39.9136 3.13165 39.9136 6.99475V16.0805H36.0006V6.99475C36.0006 6.90167 35.9969 6.80925 35.9898 6.71766L26.4628 16.079C26.4949 16.08 26.5272 16.0805 26.5595 16.0805H36.0006V19.7762H26.5595C22.6964 19.7762 19.4788 16.6139 19.4788 12.7508V3.68923H23.3919V12.7508C23.3919 12.9253 23.4054 13.0977 23.4316 13.2668L33.1682 3.6995C33.0861 3.6927 33.003 3.68923 32.9188 3.68923H23.3919V0Z\" />\n                        <path d=\"M13.7688 19.0956L0 3.68759H5.53933L13.6231 12.7337V3.68759H17.7535V17.5746C17.7535 19.6705 15.1654 20.6584 13.7688 19.0956Z\" />\n                    </svg>\n                </a>\n                <span>â€¢</span>\n                <a\n                    href=\"https://github.com/tech-savvy-guy/tic-tac-toe\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"hover:text-foreground transition-colors duration-200\"\n                >\n                    GitHub\n                </a>\n                <span>â€¢</span>\n                <ThemeToggle />\n                <span>/~</span>\n            </div>\n        </footer>\n    )\n}",
      "type": "registry:component"
    },
    {
      "path": "constants/game.ts",
      "content": "export const WINNING_COMBINATIONS = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8], // Rows\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8], // Columns\n  [0, 4, 8],\n  [2, 4, 6], // Diagonals\n]\n\nexport const ROOM_CODE_LENGTH = 6\nexport const ROOM_CODE_CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n",
      "type": "registry:lib"
    },
    {
      "path": "lib/supabase.ts",
      "content": "import { createClient } from \"@supabase/supabase-js\"\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\n\nexport type Database = {\n  public: {\n    Tables: {\n      rooms: {\n        Row: {\n          id: string\n          created_at: string\n          player1_id: string | null\n          player2_id: string | null\n          player1_name: string | null\n          player2_name: string | null\n          current_player: \"X\" | \"O\"\n          board: string[]\n          winner: string | null\n          status: \"waiting\" | \"playing\" | \"finished\"\n        }\n        Insert: {\n          id: string\n          player1_id?: string | null\n          player1_name?: string | null\n          current_player?: \"X\" | \"O\"\n          board?: string[]\n          status?: \"waiting\" | \"playing\" | \"finished\"\n        }\n        Update: {\n          player2_id?: string | null\n          player2_name?: string | null\n          current_player?: \"X\" | \"O\"\n          board?: string[]\n          winner?: string | null\n          status?: \"waiting\" | \"playing\" | \"finished\"\n        }\n      }\n    }\n  }\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "services/online-game.ts",
      "content": "import { supabase } from \"@/lib/supabase\"\nimport type { Room, Board, Player } from \"@/types/game\"\nimport { generateRoomCode, checkWinner } from \"@/utils/game-logic\"\nimport type { RealtimeChannel } from \"@supabase/supabase-js\"\n\nexport class OnlineGameService {\n  private channel: RealtimeChannel | null = null\n\n  async createRoom(playerId: string, playerName: string): Promise<Room> {\n    const code = generateRoomCode()\n\n    const { data, error } = await supabase\n      .from(\"rooms\")\n      .insert({\n        id: code,\n        player1_id: playerId,\n        player1_name: playerName.trim(),\n        board: Array(9).fill(null),\n        status: \"waiting\",\n        current_player: \"X\",\n      })\n      .select()\n      .single()\n\n    if (error) throw error\n    return data\n  }\n\n  async joinRoom(roomId: string, playerId: string, playerName: string): Promise<Room> {\n    const { data: existingRoom, error: fetchError } = await supabase\n      .from(\"rooms\")\n      .select(\"*\")\n      .eq(\"id\", roomId.toUpperCase())\n      .single()\n\n    if (fetchError || !existingRoom) {\n      throw new Error(\"Room not found!\")\n    }\n\n    if (existingRoom.player2_id) {\n      throw new Error(\"Room is full!\")\n    }\n\n    const { data, error } = await supabase\n      .from(\"rooms\")\n      .update({\n        player2_id: playerId,\n        player2_name: playerName.trim(),\n        status: \"playing\",\n      })\n      .eq(\"id\", roomId.toUpperCase())\n      .select()\n      .single()\n\n    if (error) throw error\n    return data\n  }\n\n  async makeMove(roomId: string, board: Board, playerSymbol: Player): Promise<void> {\n    const gameResult = checkWinner(board)\n    const nextPlayer = playerSymbol === \"X\" ? \"O\" : \"X\"\n    \n    // Convert Board (Player[]) to string[] for database storage\n    const boardForDb = board.map(cell => cell === null ? null : cell)\n\n    await supabase\n      .from(\"rooms\")\n      .update({\n        board: boardForDb,\n        current_player: gameResult.winner ? playerSymbol : nextPlayer,\n        winner: gameResult.winner || null,\n        status: gameResult.winner ? \"finished\" : \"playing\",\n      })\n      .eq(\"id\", roomId)\n  }\n\n  async resetGame(roomId: string): Promise<void> {\n    const { data: room } = await supabase\n      .from(\"rooms\")\n      .select(\"current_player\")\n      .eq(\"id\", roomId)\n      .single()\n\n    if (!room) return\n\n    await supabase\n      .from(\"rooms\")\n      .update({\n        board: Array(9).fill(null),\n        current_player: room.current_player === \"X\" ? \"O\" : \"X\",\n        winner: null,\n        status: \"playing\",\n      })\n      .eq(\"id\", roomId)\n  }\n\n  subscribeToRoom(\n    roomId: string,\n    onUpdate: (room: Room) => void,\n    onStatusChange: (status: string) => void,\n  ): RealtimeChannel {\n    this.channel = supabase\n      .channel(`room:${roomId}`)\n      .on(\n        \"postgres_changes\",\n        {\n          event: \"UPDATE\", // Listen specifically to updates\n          schema: \"public\",\n          table: \"rooms\",\n          filter: `id=eq.${roomId}`,\n        },\n        (payload) => {\n          console.log(\"Room update received:\", payload.new) // Debug log\n          const updatedRoom = payload.new as Room\n          onUpdate(updatedRoom)\n        },\n      )\n      .on(\n        \"postgres_changes\",\n        {\n          event: \"INSERT\", // Also listen to inserts (just in case)\n          schema: \"public\",\n          table: \"rooms\",\n          filter: `id=eq.${roomId}`,\n        },\n        (payload) => {\n          console.log(\"Room insert received:\", payload.new) // Debug log\n          const updatedRoom = payload.new as Room\n          onUpdate(updatedRoom)\n        },\n      )\n      .subscribe((status) => {\n        console.log(\"Subscription status:\", status) // Debug log\n        onStatusChange(status)\n      })\n\n    return this.channel\n  }\n\n  unsubscribe(): void {\n    if (this.channel) {\n      this.channel.unsubscribe()\n      this.channel = null\n    }\n  }\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "types/game.ts",
      "content": "export type Player = \"X\" | \"O\" | null\nexport type GameMode = \"menu\" | \"single\" | \"local\" | \"online\"\nexport type OnlineMode = \"create\" | \"join\" | \"waiting\" | \"playing\"\nexport type Board = Player[]\nexport type ConnectionStatus = \"connected\" | \"disconnected\" | \"connecting\"\n\nexport interface Room {\n  id: string\n  created_at: string\n  player1_id: string | null\n  player2_id: string | null\n  player1_name: string | null\n  player2_name: string | null\n  current_player: \"X\" | \"O\"\n  board: string[]\n  winner: string | null\n  status: \"waiting\" | \"playing\" | \"finished\"\n}\n\nexport interface GameState {\n  board: Board\n  currentPlayer: Player\n  winner: Player | \"tie\" | null\n  isGameActive: boolean\n  winningLine: number[] | null\n  isAiThinking: boolean\n}\n\nexport interface OnlineState {\n  mode: OnlineMode\n  roomCode: string\n  joinCode: string\n  playerName: string\n  room: Room | null\n  playerId: string\n  playerSymbol: Player\n  opponentConnected: boolean\n  connectionStatus: ConnectionStatus\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "utils/game-logic.ts",
      "content": "import type { Board, Player } from \"@/types/game\"\nimport { WINNING_COMBINATIONS } from \"@/constants/game\"\n\nexport const checkWinner = (board: Board): { winner: Player | \"tie\" | null; line: number[] | null } => {\n  for (const combination of WINNING_COMBINATIONS) {\n    const [a, b, c] = combination\n    if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n      return { winner: board[a], line: combination }\n    }\n  }\n\n  if (board.every((cell) => cell !== null)) {\n    return { winner: \"tie\", line: null }\n  }\n\n  return { winner: null, line: null }\n}\n\nexport const makeAIMove = (board: Board): number => {\n  // Check if AI can win\n  for (let i = 0; i < 9; i++) {\n    if (board[i] === null) {\n      const testBoard = [...board]\n      testBoard[i] = \"O\"\n      if (checkWinner(testBoard).winner === \"O\") {\n        return i\n      }\n    }\n  }\n\n  // Check if AI needs to block player\n  for (let i = 0; i < 9; i++) {\n    if (board[i] === null) {\n      const testBoard = [...board]\n      testBoard[i] = \"X\"\n      if (checkWinner(testBoard).winner === \"X\") {\n        return i\n      }\n    }\n  }\n\n  // Take center if available\n  if (board[4] === null) return 4\n\n  // Take corners\n  const corners = [0, 2, 6, 8]\n  const availableCorners = corners.filter((i) => board[i] === null)\n  if (availableCorners.length > 0) {\n    return availableCorners[Math.floor(Math.random() * availableCorners.length)]\n  }\n\n  // Take any available space\n  const availableSpaces = board.map((cell, index) => (cell === null ? index : null)).filter((val) => val !== null)\n  return availableSpaces[Math.floor(Math.random() * availableSpaces.length)] as number\n}\n\nexport const generateRoomCode = (): string => {\n  const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n  let result = \"\"\n  for (let i = 0; i < 6; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length))\n  }\n  return result\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "scripts/setup-database.sql",
      "content": "-- Create rooms table\nCREATE TABLE IF NOT EXISTS rooms (\n  id VARCHAR(6) PRIMARY KEY,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  player1_id UUID,\n  player2_id UUID,\n  player1_name VARCHAR(50),\n  player2_name VARCHAR(50),\n  current_player VARCHAR(1) DEFAULT 'X' CHECK (current_player IN ('X', 'O')),\n  board TEXT[] DEFAULT ARRAY[NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL],\n  winner VARCHAR(10),\n  status VARCHAR(20) DEFAULT 'waiting' CHECK (status IN ('waiting', 'playing', 'finished'))\n);\n\n-- Enable Row Level Security\nALTER TABLE rooms ENABLE ROW LEVEL SECURITY;\n\n-- Create policies for rooms\nCREATE POLICY \"Anyone can read rooms\" ON rooms FOR SELECT USING (true);\nCREATE POLICY \"Anyone can create rooms\" ON rooms FOR INSERT WITH CHECK (true);\nCREATE POLICY \"Players can update their rooms\" ON rooms FOR UPDATE USING (\n  auth.uid() = player1_id OR auth.uid() = player2_id OR auth.uid() IS NULL\n);\n\n-- Create function to generate room codes\nCREATE OR REPLACE FUNCTION generate_room_code()\nRETURNS TEXT AS $$\nDECLARE\n  chars TEXT := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  result TEXT := '';\n  i INTEGER;\nBEGIN\n  FOR i IN 1..6 LOOP\n    result := result || substr(chars, floor(random() * length(chars) + 1)::INTEGER, 1);\n  END LOOP;\n  RETURN result;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Create function to clean up old rooms (optional)\nCREATE OR REPLACE FUNCTION cleanup_old_rooms()\nRETURNS void AS $$\nBEGIN\n  DELETE FROM rooms \n  WHERE created_at < NOW() - INTERVAL '24 hours';\nEND;\n$$ LANGUAGE plpgsql;\n",
      "type": "registry:file",
      "target": "scripts/setup-database.sql"
    },
    {
      "path": "scripts/setup.sh",
      "content": "#!/usr/bin/env bash\nset -euo pipefail\n\nif [[ -z \"${DATABASE_URL:-}\" ]]; then\n  echo \"DATABASE_URL is not set. Add it to your .env.local before running this script.\"\n  exit 1\nfi\n\nif ! command -v psql >/dev/null 2>&1; then\n  echo \"psql is not installed or not in PATH. Please install PostgreSQL client tools.\"\n  exit 1\nfi\n\necho \"Running database setup using scripts/setup-database.sql...\"\npsql \"$DATABASE_URL\" -v ON_ERROR_STOP=1 -f scripts/setup-database.sql\necho \"Database setup completed.\"\n\n#!/usr/bin/env bash\nset -euo pipefail\n\nif [[ -z \"${DATABASE_URL:-}\" ]]; then\n  echo \"DATABASE_URL is not set. Add it to your .env.local before running this script.\"\n  exit 1\nfi\n\nif ! command -v psql >/dev/null 2>&1; then\n  echo \"psql is not installed or not in PATH. Please install PostgreSQL client tools.\"\n  exit 1\nfi\n\necho \"Running database setup using scripts/setup-database.sql...\"\npsql \"$DATABASE_URL\" -v ON_ERROR_STOP=1 -f scripts/setup-database.sql\necho \"Database setup completed.\"\n\n",
      "type": "registry:file",
      "target": "scripts/setup.sh"
    }
  ]
}